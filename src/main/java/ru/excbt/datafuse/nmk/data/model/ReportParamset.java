package ru.excbt.datafuse.nmk.data.model;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import ru.excbt.datafuse.nmk.data.domain.AbstractAuditableModel;
import ru.excbt.datafuse.nmk.data.model.keyname.ReportPeriod;
import ru.excbt.datafuse.nmk.data.model.markers.DeletableObjectId;
import ru.excbt.datafuse.nmk.report.ReportOutputFileType;
import ru.excbt.datafuse.nmk.report.ReportPeriodKey;

/**
 * Вариант отчета
 *
 * @author A.Kovtonyuk
 * @version 1.0
 * @since 10.04.2015
 *
 */
@Entity
@Table(name = "report_paramset")
@SQLDelete(sql = "UPDATE report_paramset SET deleted = 1 WHERE id = ? and version = ?")
@Where(clause = "deleted <> 1")
@JsonIgnoreProperties(ignoreUnknown = true)
@Cache(usage = CacheConcurrencyStrategy.NONE)
@Getter
@Setter
public class ReportParamset extends AbstractAuditableModel implements DeletableObjectId {

	/**
	 *
	 */
	private static final long serialVersionUID = -4162460506388144170L;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "report_template_id")
	private ReportTemplate reportTemplate;

	@Column(name = "report_template_id", insertable = false, updatable = false)
	private Long reportTemplateId;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "subscriber_id")
	@JsonIgnore
	private Subscriber subscriber;

	@Column(name = "subscriber_id", insertable = false, updatable = false)
	private Long subscriberId;

	@Column(name = "report_paramset_name")
	private String name;

	@Column(name = "report_paramset_description")
	private String description;

	@Column(name = "report_paramset_comment")
	private String comment;

	@Enumerated(EnumType.STRING)
	@Column(name = "output_file_type")
	private ReportOutputFileType outputFileType;

	@Column(name = "output_file_name_template")
	private String outputFileNameTemplate;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "report_period", insertable = false, updatable = false)
	private ReportPeriod reportPeriod;

	@Enumerated(EnumType.STRING)
	@Column(name = "report_period")
	private ReportPeriodKey reportPeriodKey;

	@Column(name = "report_paramset_one_date")
	@Temporal(TemporalType.TIMESTAMP)
	private Date paramsetOneDate;

	@Column(name = "report_paramset_start_date")
	@Temporal(TemporalType.TIMESTAMP)
	private Date paramsetStartDate;

	@Column(name = "report_paramset_end_date")
	@Temporal(TemporalType.TIMESTAMP)
	private Date paramsetEndDate;

	@Column(name = "is_default")
	private boolean _default;

	@Column(name = "is_active")
	private boolean _active;

	@Column(name = "active_start_date")
	@Temporal(TemporalType.TIMESTAMP)
	private Date activeStartDate;

	@Column(name = "active_end_date")
	@Temporal(TemporalType.TIMESTAMP)
	private Date activeEndDate;

	@Column(name = "src_report_paramset_id")
	private Long srcReportParamsetId;

	@Column(name = "all_required_params_passed")
	private Boolean allRequiredParamsPassed;

	@Column(name = "output_file_zipped")
	private Boolean outputFileZipped;

	//	@Column(name = "output_file_template")
	//	private Boolean outputFileTemplate;

	@Version
	private int version;

	@Column(name = "deleted")
	private int deleted;

	@Column(name = "is_context_launch")
	private Boolean isContextLaunch;

	@Column(name = "is_context_launch_child")
	private Boolean isContextLaunchChild;

	@JsonIgnore
	@Column(name = "is_auto_generated", updatable = false)
	private Boolean isAutoGenerated;

	@OneToMany(mappedBy = "reportParamset", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private Collection<ReportParamsetParamSpecial> paramSpecialList = new ArrayList<ReportParamsetParamSpecial>();

	@Column(name = "settlement_day")
	private Integer settlementDay;

	@Column(name = "settlement_month")
	private Integer settlementMonth;

	@Column(name = "settlement_year")
	private Integer settlementYear;

}
